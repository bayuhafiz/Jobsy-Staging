<!-- BEGIN VENDOR JS -->
    <script src="assets/plugins/pace/pace.min.js" type="text/javascript"></script>
    <script src="assets/plugins/jquery/jquery-2.1.4.min.js" type="text/javascript"></script>
    <script src="assets/plugins/jquery/jquery.autosize.js" type="text/javascript"></script>
    <script src="assets/plugins/modernizr.custom.js" type="text/javascript"></script>
    <script src="assets/plugins/jquery-ui/jquery-ui.min.js" type="text/javascript"></script>
    <script src="assets/plugins/boostrapv3/js/bootstrap.min.js" type="text/javascript"></script>
    <script src="assets/plugins/jquery/jquery-easy.js" type="text/javascript"></script>
    <script src="assets/plugins/jquery-unveil/jquery.unveil.min.js" type="text/javascript"></script>
    <script src="assets/plugins/jquery-bez/jquery.bez.min.js"></script>
    <script src="assets/plugins/jquery-ios-list/jquery.ioslist.min.js" type="text/javascript"></script>
    <script src="assets/plugins/jquery-actual/jquery.actual.min.js"></script>
    <script src="assets/plugins/jquery-scrollbar/jquery.scrollbar.min.js"></script>
    <script type="text/javascript" src="assets/plugins/classie/classie.js"></script>
    <script src="assets/plugins/switchery/js/switchery.min.js" type="text/javascript"></script>
    <script src="assets/plugins/jquery-datatable/media/js/jquery.dataTables.min.js" type="text/javascript"></script>
    <script type="text/javascript" src="assets/plugins/bootstrap-select2/select2.min.js"></script>
    <script type="text/javascript" src="assets/plugins/jquery-autonumeric/autoNumeric.js"></script>
    <script src="assets/plugins/jquery-inputmask/jquery.inputmask.min.js" type="text/javascript"></script>
    <script type="text/javascript" src="assets/plugins/dropzone/dropzone.min.js"></script>
    <script type="text/javascript" src="assets/plugins/bootstrap-tag/bootstrap-tagsinput.min.js"></script>
    <script src="assets/plugins/bootstrap-datepicker/js/bootstrap-datepicker.js" type="text/javascript"></script>
    <script src="assets/plugins/jquery-validation/js/jquery.validate.min.js" type="text/javascript"></script>
    <script src="assets/plugins/moment/moment.min.js" type="text/javascript"></script>
    <script type="text/javascript" src="assets/plugins/boostrap-form-wizard/js/jquery.bootstrap.wizard.min.js"></script>
    <script src="assets/plugins/initial.min.js" type="text/javascript"></script>
    <script src="assets/plugins/formvalidation/dist/js/formValidation.min.js"></script>
    <script src="assets/plugins/formvalidation/dist/js/framework/bootstrap.min.js"></script>
    <script src="assets/plugins/sweetalert.min.js"></script>
    <script src="assets/plugins/ladda.spin.min.js"></script>
    <script src="assets/plugins/ladda.min.js"></script>
    <!-- END VENDOR JS -->

    <!-- BEGIN CORE TEMPLATE JS -->
    <script src="assets/plugins/pages.min.js"></script>
    <!-- END CORE TEMPLATE JS -->

    <!-- BEGIN PAGE LEVEL JS -->
    <script src="assets/plugins/form_elements.js" type="text/javascript"></script>
    <script src="assets/plugins/scripts.js" type="text/javascript"></script>
    <script src="assets/plugins/words-counter.js" type="text/javascript"></script>
    <script src="assets/plugins/ckeditor/ckeditor.js"></script>
    <script src="assets/plugins/ckeditor/adapters/jquery.js"></script>

    <script>
        $(document).ready(function(){

            //////// Image processing /////////
            // Create Post Modal //
            var options = {
                thumbBox: '.thumbBox',
                spinner: '.spinner',
                imgSrc: 'avatar.png',
                resizeToWidth: 190,
                resizeToHeight: 190
            }
            var cropper;

            $('.logoBox').on('click', function() {
                $('#logo_file').trigger('click');
            });

            $('#btn-cropper-done,#btn-cropper-close').click(function() {
                $('#PostNewJob, #EditJob').css({
                    'overflow-x': 'hidden',
                    'overflow-y': 'auto',
                    'z-index': '1041'
                });
                $('body').css('overflow', 'hidden');
            });

            $('#PostNewJob .close').click(function() {
                $('body').css('overflow', 'auto');
            });

            $('#logo_file').on('change', function() {
                $('#modal_cropper').modal({
                    show: true
                });

                var reader = new FileReader();
                reader.onload = function(e) {
                    options.imgSrc = e.target.result;

                    // Attach image to canvas
                    cropper = $('.imageBox').cropbox(options);
                }

                reader.readAsDataURL(this.files[0]);
                this.files = [];

                $('.action').fadeIn('slow');
            });

            $('#btn-cropper-choose').on('click', function() {
                $('#logo_file').trigger('click');
            });

            $('#btn-cropper-done').on('click', function() {
                var img = cropper.getDataURL()
                $('#image-source').val(img);
                $('#logo-preview').attr('src', img);
                $('#modal_cropper').modal('hide');
            });

            $('#btn-cropper-zoomin').on('click', function() {
                cropper.zoomIn();
            });

            $('#btn-cropper-zoomout').on('click', function() {
                cropper.zoomOut();
            });
            ///// End of Image processing ///////



            $('.page-activation').fadeOut('fast').fadeIn('slow');
            /// disable previous btn func
            

            // Show create job modal
            $('#PostNewJob').modal({
                show: true,
                backdrop: false,
                keyboard: false,
            });

            // Input masking
            $("#salary-from").autoNumeric('init', {
                aSep: '.',
                aDec: ',',
                mDec: '0'
            });
            $("#salary-to").autoNumeric('init', {
                aSep: '.',
                aDec: ',',
                mDec: '0'
            });
           

            // Read user first signup status
            $('#createJobImg').change(function(){
                $('#step2-icon').removeClass().addClass('fa fa-check-circle-o fa-3x').css('color', '#12806D');
                $('#step2-text').removeClass().css('color', '#12806D').hide().show('slow');
            });

            $('#companyName').change(function(){
                $('#step2-icon').removeClass().addClass('fa fa-check-circle-o fa-3x').css('color', '#52D5BE');
                $('#step2-text').removeClass().css('color', '#52D5BE').hide().show('slow');
            });

            
            $('#myFormWizard3').bootstrapWizard({
                onTabShow: function(tab, navigation, index) {
                    var $total = navigation.find('li').length;
                    var $current = index + 1;

                    // If it's the last tab then hide the last button and show the finish instead
                    if ($current >= $total) {
                        $('#myFormWizard3').find('.pager .next').hide();
                        $('#myFormWizard3').find('.pager .finish').show();
                        $('#myFormWizard3').find('.pager .finish').removeClass('disabled');
                    } else {
                        $('#myFormWizard3').find('.pager .next').show();
                        $('#myFormWizard3').find('.pager .finish').hide();
                    }

                    var li = navigation.find('li.active');

                    var btnNext = $('#myFormWizard3').find('.pager .next').find('button');
                    var btnPrev = $('#myFormWizard3').find('.pager .previous').find('button');

                    // remove fontAwesome icon classes
                    function removeIcons(btn) {
                        btn.removeClass(function(index, css) {
                            return (css.match(/(^|\s)fa-\S+/g) || []).join(' ');
                        });
                    }

                    if ($current > 1 && $current < $total) {

                        var nextIcon = li.next().find('.fa');
                        var nextIconClass = nextIcon.attr('class').match(/fa-[\w-]*/).join();

                        removeIcons(btnNext);
                        btnNext.addClass(nextIconClass + ' btn-animated from-left fa');

                        var prevIcon = li.prev().find('.fa');
                        var prevIconClass = prevIcon.attr('class').match(/fa-[\w-]*/).join();

                        removeIcons(btnPrev);
                        btnPrev.addClass(prevIconClass + ' btn-animated from-left fa');
                    } else if ($current == 1) {
                        // remove classes needed for button animations from previous button
                        btnPrev.removeClass('btn-animated from-left fa');
                        removeIcons(btnPrev);
                    } else {
                        // remove classes needed for button animations from next button
                        btnNext.removeClass('btn-animated from-left fa');
                        removeIcons(btnNext);
                    }
                }
            });

            /*if ($('.firstTab').hasClass('active')) {
                $('.btn-previous').hide();
            };

            $('.firstTab,.btn-previous').click(function () {
               $('.btn-previous').hide();
            });
            $('.secondTab,.btn-next').click(function () {
               $('.btn-previous').show();
            });*/

            CKEDITOR.inline('editorAct1');
            CKEDITOR.inline('editorAct2');
            CKEDITOR.inline('editorAct3');
            

            // FORM CREATE JOB POST
            function adjustIframeHeight() {
                var $body   = $('body'),
                        $iframe = $body.data('iframe.fv');
                if ($iframe) {
                    // Adjust the height of iframe
                    $iframe.height($body.height());
                }
            };

            $('#form-create-post')
                .find('[name="currency"]')
                .select2()
                .change(function(e) {
                    $('#form-create-job').formValidation('revalidateField', 'currency');
                })
                .end()
                .find('[name="salaryType"]')
                .select2()
                .change(function(e) {
                    $('#form-create-job').formValidation('revalidateField', 'salaryType');
                })
                .end()
                .find('[name="location"]')
                .select2()
                .change(function(e) {
                    $('#form-create-job').formValidation('revalidateField', 'location');
                })
                .end()
                .find('[name="category"]')
                .select2()
                .change(function(e) {
                    $('#form-create-job').formValidation('revalidateField', 'category');
                })
                .end()
                .find('[name="jobType"]')
                .select2()
                .change(function(e) {
                    $('#form-create-job').formValidation('revalidateField', 'jobType');
                })
                .end()
                .formValidation({
                    framework: 'bootstrap',
                    excluded: ':disabled',
                    fields: {
                        logo_file: {
                            validators: {
                                file: {
                                    extension: 'jpeg,png',
                                    type: 'image/jpeg,image/png',
                                    maxSize: 2097152, // 2048 * 1024
                                    message: 'The selected file is not valid'
                                }
                            }
                        },
                        companyName: {
                            validators: {
                                notEmpty: {
                                    message: 'The company name required'
                                },
                                stringLength: {
                                    min: 5,
                                    message: 'Must be more than 4 characters long'
                                }
                            }
                        },
                        jobTitle: {
                            validators: {
                                notEmpty: {
                                    message: 'The job position is required'
                                },
                                stringLength: {
                                    min: 5,
                                    message: 'Must be more than 4 characters long'
                                }
                            }
                        },
                        currency: {
                            validators: {
                                message: 'Please select currency',
                                callback: function(value, validator, $field) {
                                    // Get the selected options
                                    var options = validator.getFieldElements('currency').val();
                                    return (options != null);
                                }
                            }
                        },
                        salaryFrom: {
                            validators: {
                                notEmpty: {
                                    message: 'The minimum salary is required'
                                }
                            }
                        },
                        salaryTo: {
                            validators: {
                                notEmpty: {
                                    message: 'The maximum salary is required'
                                }
                            }
                        },
                        salaryType: {
                            validators: {
                                message: 'Please select salary type',
                                callback: function(value, validator, $field) {
                                    // Get the selected options
                                    var options = validator.getFieldElements('salaryType').val();
                                    return (options != null);
                                }
                            }
                        },
                        location: {
                            validators: {
                                notEmpty: {
                                    message: 'Please choose job location'
                                }
                            }
                        },
                        category: {
                            validators: {
                                notEmpty: {
                                    message: 'Please choose job category'
                                }
                            }
                        },
                        jobType: {
                            validators: {
                                notEmpty: {
                                    message: 'Please choose job type'
                                }
                            }
                        },
                        description: {
                            validators: {
                                notEmpty: {
                                    message: 'Please provide company description',
                                }
                            }
                        },
                        jobScope: {
                            validators: {
                                notEmpty: {
                                    message: 'Please provide job scopes'
                                }
                            }
                        },
                        requirements: {
                            validators: {
                                notEmpty: {
                                    message: 'Please provide job requirements'
                                }
                            }
                        }
                    }
                })
                .bootstrapWizard({
                    tabClass: 'nav nav-tabs nav-tabs-linetriangle nav-tabs-separator',
                    onTabClick: function(tab, navigation, index) {
                        return validateTab(index);
                    },
                    onNext: function(tab, navigation, index) {
                        var numTabs    = $('#form-create-post').find('.tab-pane').length,
                            isValidTab = validateTab(index - 1);
                        if (!isValidTab) {
                            return false;
                        }

                        if (index === numTabs) {
                            // We are at the last tab

                            // Uncomment the following line to submit the form using the defaultSubmit() method
                            // $('#installationForm').formValidation('defaultSubmit');

                            // For testing purpose
                            $('#completeModal').modal();
                        }

                        return true;
                    },
                    onPrevious: function(tab, navigation, index) {
                        return validateTab(index + 1);
                    },
                    onTabShow: function(tab, navigation, index) {
                        // Update the label of Next button when we are at the last tab
                        var numTabs = $('#form-create-post').find('.tab-pane').length;
                        $('#form-create-post')
                            .find('.next')
                                .removeClass('disabled')    // Enable the Next button
                                .find('a')
                                .html(index === numTabs - 1 ? 'Install' : 'Next');

                        // You don't need to care about it
                        // It is for the specific demo
                        adjustIframeHeight();
                    }
                })
                .on('success.form.fv', function(e) {
                    // Prevent form submission
                    e.preventDefault();

                    // Create button loader instance
                    var loader = Ladda.create(document.querySelector('#btn-submit-post'));
                    // Start loading
                    loader.start();

                    // Reset the message element when the form is valid
                    $('#status_post').html('');

                    var $form = $(e.target),
                        fv = $form.data('formValidation');

                    $.ajax({
                        url: $form.attr('action'),
                        data: $form.serialize(),
                        type: 'POST',
                        success: function(result) {
                            if (result.type == 'success') {
                                // Stop loading
                                loader.stop();
                                loader.remove();

                                swal({
                                    type: 'success',
                                    title: "Success!",
                                    text: result.msg
                                }, function() {
                                    location.reload(true);
                                });
                            } else {
                                // Stop loading
                                loader.stop();
                                loader.remove();

                                $('<li/>')
                                    .wrapInner(
                                        $('<span/>')
                                        .attr('class', 'ajax_error')
                                        .html(result.msg)
                                    )
                                    .appendTo('#status_post');
                            }
                        }
                    });
                })
                .on('err.field.fv', function(e, data) {
                    // Remove button's disable class
                    $('#btn-submit-post').removeClass('disable');
                })
                .on('success.field.fv', function(e, data) {
                    // Remove button's disable class
                    $('#btn-submit-post').removeClass('disable');

                    // Reset the message element when the form is valid
                    $('#status_post').html('');
                });

            function validateTab(index) {
                var fv   = $('#form-create-post').data('formValidation'), // FormValidation instance
                    // The current tab
                    $tab = $('#form-create-post').find('.tab-pane').eq(index);

                // Validate the container
                fv.validateContainer($tab);

                var isValidStep = fv.isValidContainer($tab);
                if (isValidStep === false || isValidStep === null) {
                    // Do not jump to the target tab
                    return false;
                }

                return true;
            }
            // EOF


            // Signout button handler
            $("a[href='#signout']").click(function() {
                swal({
                    title: "Are you sure?",
                    text: "You still have one more step to get done. Are you sure that you want to sign out?",
                    showCancelButton: true,
                    closeOnConfirm: false,
                    confirmButtonText: "Yes, sign me out!",
                    confirmButtonColor: "#ec6c62"
                }, function() {
                    $.ajax({
                        url: '/api/account/signout',
                        type: 'GET',
                        success: function(result) {
                            window.location.href = '/';
                        }
                    });
                });
            });

        });
    </script>
    <!-- END PAGE LEVEL JS -->
